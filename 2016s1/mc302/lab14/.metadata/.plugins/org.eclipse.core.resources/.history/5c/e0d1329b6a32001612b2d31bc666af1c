package sistemaCaixaAutomatico;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StreamTokenizer;

import java.lang.reflect.Field;

public class TerminalReflexivo {

	private ControladorCaixa controladorCaixa; // associação entre terminal e controladorcaixa

	public TerminalReflexivo(int senhaCaixa) {
		controladorCaixa = new ControladorCaixa(senhaCaixa);
	}

	private int getInt(String str) {

		System.out.println("Entre com "+str);

		// lê os valores digitados na entrada padrão
		Reader r = new BufferedReader(new InputStreamReader (System.in));
		StreamTokenizer st = new StreamTokenizer(r);

		try {
			st.nextToken();
		}
		catch (IOException e) {
			System.out.println("Erro na leitura do teclado");
			return(0);
		}

		return((int)st.nval);
	}


	private int getOp() {
		int op;

		int modoAtual = this.controladorCaixa.obterModoOperacaoAtual();

		do {
			if (modoAtual==Caixa.MODO_CLIENTE) {  // modo cliente 
				op=getInt
						("opcao: 1 = consulta saldo, 2 = saque, 8 = modo supervisor, 9 = sai");
				if (op!=1 && op!=2 && op!=8 && op!=9) op=0;
			}else {				// modo supervisor 
				op=getInt
						("opcao: 3 = recarrega, 8 = modo cliente, 9 = sai");
				if (op!=3 && op!=8 && op!=9) op=0;
			}
		} while (op==0);
		return(op);
	}

	public void iniciarOperacao (){
		int op;	// código da operação solicitada 
		op=getOp();
		while (op!=9) {
			switch (op) {
			
			case 1:
				System.out.println("Imprimindo Hierarquia de classes:");
				
				Class c = ContaCor.class;
				
				while(c != null){
					System.out.println(c.getName());
					c = c.getSuperclass();
				}				
				
				break;
				
				
			case 2:
				System.out.println("Imprimindo Atributos declarados:");
				
				Field[] atts = ContaCor.class.getDeclaredFields();
				
				for(Field at: atts){
					System.out.println(at.getName()+" : "+at);	
				}
				
				
				break;
			
			case 11:
				float saldo = controladorCaixa.consultarSaldo(getInt("número da conta"), getInt("senha"));

				if (saldo==-1)  // testa se consulta foi rejeitada 
					System.out.println("conta/senha inválida ou conta inativa");
				else
					System.out.println("Saldo atual: "+saldo); 
				break;

			case 12:
				boolean saqueEfetuado = controladorCaixa.efetuarSaque(getInt("número da conta"), getInt("senha"), getInt("valor"));
				if (saqueEfetuado)		// testa se saque foi aceito 
					System.out.println("Pode retirar o dinheiro");
				else 
					System.out.println("Pedido de saque recusado");
				break;

			case 3:
				controladorCaixa.recarregar(getInt("senha")); 
				break;

			case 8:
				controladorCaixa.alternarModo(getInt("senha do caixa")); 
				break;
			}
			op=getOp();
		}
	}
	
}
